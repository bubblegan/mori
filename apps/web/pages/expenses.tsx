import { useCallback, useEffect, useState } from "react";
import Head from "next/head";
import { useSearchParams } from "next/navigation";
import { useRouter } from "next/router";
import { AiExpenseForm } from "@/components/ai-expense-form";
import { AiFilterPopover } from "@/components/ai-filter-popover";
import BasePage from "@/components/base-page";
import { CategoriseExpenseForm } from "@/components/categorise-expense-form";
import CategorySelect from "@/components/category-select";
import DateRangePicker from "@/components/date-range-picker";
import { DesktopOnly } from "@/components/desktop-only";
import { ExpenseFilterPills } from "@/components/expense-filter-pills";
import ExpenseForm, { ExpenseFormAtom } from "@/components/expense-form";
import ExpenseTable from "@/components/expense-table";
import KeywordSearch from "@/components/keyword-search";
import { MobileExpenseTable } from "@/components/mobile-expense-table";
import { MobileOnly } from "@/components/mobile-only";
import StatementSelect from "@/components/statement-select";
import { TagExpenseForm } from "@/components/tag-expense-form";
import { TagSelect } from "@/components/tag-select";
import { ThemeSelect } from "@/components/theme-select";
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuItem,
  DropdownMenuContent,
} from "@/components/ui/dropdown-menu";
import UploadStatementForm from "@/components/upload-statement-form";
import { formatToDisplayDate } from "@/utils/date-util";
import { downloadCsv } from "@/utils/download-as-csv";
import { useHandleExpenseFetch } from "@/utils/hooks/use-handle-expense-fetch";
import { useAtom } from "jotai";
import { ListFilter, Plus, Settings, Sparkles, Upload } from "lucide-react";

export default function Expenses() {
  const [isUploadDialogOpen, setUploadDialogOpen] = useState(false);
  const [isCategoriseDialogOpen, setCategoriseDialog] = useState(false);
  const [isTagDialogOpen, setTagDialog] = useState(false);
  const [isAiExpenseFormOpen, setAiExpenseFormOpen] = useState(false);
  const [mobileFilterDialog, setMobileFilterDialog] = useState(false);

  const [, setValue] = useAtom(ExpenseFormAtom);

  const searchParams = useSearchParams();
  const router = useRouter();

  // get data here
  const { expenses, amount, totalCount } = useHandleExpenseFetch();

  const donwloadAsCsv = useCallback(() => {
    if (expenses) {
      const csvData = expenses.map((expense) => {
        return {
          id: expense.id,
          amount: `${Number(expense.amount).toFixed(2).toLocaleString()}`,
          statement: expense.Statement?.name || "",
          description: expense.description,
          date: formatToDisplayDate(expense.date),
          category: expense.Category?.title || "",
        };
      });
      downloadCsv(csvData);
    }
  }, [expenses]);

  useEffect(() => {
    if (searchParams.size === 0) {
      window.history.replaceState(null, "", router.pathname);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [searchParams]);

  return (
    <>
      <Head>
        <title>Expenses</title>
        <meta name="description" content="SelectContentGenerated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <BasePage>
        <div className="flex w-full flex-col gap-4">
          <div className="hidden w-full justify-between md:flex">
            <div className="flex gap-3">
              <div className="w-64">
                <KeywordSearch />
              </div>
              <StatementSelect />
              <CategorySelect />
              <TagSelect />
              <DateRangePicker />
              <AiFilterPopover />
            </div>
            <div className="flex flex-row gap-3">
              <Button variant="outline" onClick={() => setAiExpenseFormOpen(true)}>
                <Plus size={16} />
              </Button>
              <Button variant="outline" onClick={() => setUploadDialogOpen(true)}>
                <Upload size={16} />
              </Button>
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="outline">
                    <Settings size={16} />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end">
                  <DropdownMenuItem onClick={() => setValue({ isOpen: true, expense: undefined })}>
                    Add Expense
                  </DropdownMenuItem>
                  <DropdownMenuItem onClick={() => setCategoriseDialog(true)}>Categorise</DropdownMenuItem>
                  <DropdownMenuItem onClick={() => setTagDialog(true)}>Tag</DropdownMenuItem>
                  <DropdownMenuItem onClick={donwloadAsCsv}>CSV</DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
              <ThemeSelect />
            </div>
          </div>
          <div className="flex gap-2 md:flex-row">
            <div
              className={
                "h-9 w-fit rounded-md border border-input px-3 py-2 text-xs text-primary md:text-sm"
              }>
              <span>Total: $ {new Intl.NumberFormat().format(Number(amount))}</span>
            </div>
            <div className="h-9 w-fit rounded-md border border-input px-3 py-2 text-xs text-primary md:text-sm">
              <span>Count: {totalCount}</span>
            </div>
            <MobileOnly>
              <div className="flex flex-row gap-2">
                <Button variant={"outline"} size={"sm"} onClick={() => setMobileFilterDialog(true)}>
                  <ListFilter size={16} />
                </Button>
                <AiFilterPopover />
              </div>
            </MobileOnly>
            <DesktopOnly>
              <ExpenseFilterPills />
            </DesktopOnly>
            {searchParams.size > 0 && (
              <Button
                onClick={() => {
                  router.push(`/expenses`, undefined, {
                    shallow: true,
                  });
                }}
                size={"sm"}>
                Reset
              </Button>
            )}
          </div>
          <MobileOnly>
            <MobileExpenseTable />
          </MobileOnly>
          <DesktopOnly>
            <ExpenseTable />
          </DesktopOnly>
        </div>
        <ExpenseForm />
        <TagExpenseForm isOpen={isTagDialogOpen} setIsOpen={setTagDialog} />
        <UploadStatementForm isOpen={isUploadDialogOpen} setIsOpen={setUploadDialogOpen} />
        <CategoriseExpenseForm isOpen={isCategoriseDialogOpen} setIsOpen={setCategoriseDialog} />
        <Dialog open={isAiExpenseFormOpen}>
          <DialogContent
            onCloseClick={() => {
              setAiExpenseFormOpen(false);
            }}
            className="min-w-fit">
            <DialogHeader>
              <DialogTitle className="flex flex-row items-center gap-2">
                Add Expenses <Sparkles size={20} />
              </DialogTitle>
            </DialogHeader>
            <AiExpenseForm
              onExpenseCreate={() => {
                setAiExpenseFormOpen(false);
              }}
            />
          </DialogContent>
        </Dialog>
        <Dialog open={mobileFilterDialog}>
          <DialogContent
            onCloseClick={() => {
              setMobileFilterDialog(false);
            }}
            className="min-w-fit">
            <DialogHeader>
              <DialogTitle className="flex flex-row items-center gap-2">Filter</DialogTitle>
            </DialogHeader>
            <div className="flex flex-col gap-4">
              <KeywordSearch />
              <div className="flex w-full flex-row gap-2">
                <StatementSelect />
                <CategorySelect />
              </div>
              <TagSelect />
              <DateRangePicker />
            </div>
          </DialogContent>
        </Dialog>
      </BasePage>
    </>
  );
}
