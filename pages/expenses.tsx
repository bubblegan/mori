import { useCallback, useState } from "react";
import Head from "next/head";
import { useSearchParams } from "next/navigation";
import { useRouter } from "next/router";
import BasePage from "@/components/base-page";
import CategorySelect from "@/components/category-select";
import CategorySummaryTable from "@/components/category-summary-table";
import { ConfirmationDialogAtom } from "@/components/confirmation-dialog";
import DateRangePicker from "@/components/date-range-picker";
import { ExpenseFilterPills } from "@/components/expense-filter-pills";
import ExpenseForm from "@/components/expense-form";
import ExpenseTable from "@/components/expense-table";
import KeywordSearch from "@/components/keyword-search";
import StatementSelect from "@/components/statement-select";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  Select,
  SelectTrigger,
  SelectValue,
  SelectGroup,
  SelectItem,
  SelectContent,
} from "@/components/ui/select";
import UploadStatementForm from "@/components/upload-statement-form";
import { Button } from "@/ui/button";
import { downloadCsv } from "@/utils/download-as-csv";
import useHandleExpenseFetch from "@/utils/hooks/useHandleExpenseFetch";
import dayjs from "dayjs";
import { useAtom } from "jotai";

export default function Expenses() {
  const [isUploadDialogOpen, setUploadDialogOpen] = useState(false);
  const [, setValue] = useAtom(ConfirmationDialogAtom);

  const searchParams = useSearchParams();
  const router = useRouter();
  const isFiltered =
    searchParams?.has("keyword") || searchParams?.has("categoryIds") || searchParams?.has("statementIds");

  const view = searchParams?.get("view");

  // get data here
  const { expenses, handleAiCategorize } = useHandleExpenseFetch(() => {
    setValue({
      isOpen: false,
      onConfirm: () => null,
      title: "",
      message: "",
    });
  });

  const donwloadAsCsv = useCallback(() => {
    if (expenses.data) {
      const csvData = expenses.data.result.map((expense) => {
        return {
          id: expense.id,
          amount: `${Number(expense.amount).toFixed(2).toLocaleString()}`,
          statement: expense.Statement?.name || "",
          description: expense.description,
          date: dayjs(expense.date).format("YYYY MMM DD"),
          category: expense.Category?.title || "",
        };
      });
      downloadCsv(csvData);
    }
  }, [expenses.data]);

  return (
    <>
      <Head>
        <title>Expenses</title>
        <meta name="description" content="SelectContentGenerated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <BasePage>
        <div className="flex w-full flex-col gap-4">
          <div className="flex w-full justify-between">
            <div className="flex gap-4">
              <div className="w-64">
                <KeywordSearch />
              </div>
              <StatementSelect />
              <CategorySelect />
              <DateRangePicker />
              {isFiltered && (
                <Button
                  onClick={() => {
                    router.push(`/expenses`, undefined, {
                      shallow: true,
                    });
                  }}
                  variant={"ghost"}>
                  Reset
                </Button>
              )}
              <Select
                onValueChange={(value) => {
                  const params = new URLSearchParams(window.location.search);
                  if (value === "aggregate") {
                    params.set("view", value);
                  } else {
                    params.delete("view");
                  }
                  router.push(`/expenses?${params.toString()}`, undefined, {
                    shallow: true,
                  });
                }}
                defaultValue="expense">
                <SelectTrigger className="w-[180px]">
                  <SelectValue placeholder="Select a fruit" />
                </SelectTrigger>
                <SelectContent>
                  <SelectGroup>
                    <SelectItem value="expense">Expenses</SelectItem>
                    <SelectItem value="aggregate">Aggregate</SelectItem>
                  </SelectGroup>
                </SelectContent>
              </Select>
            </div>
            <DropdownMenu>
              <DropdownMenuTrigger className="rounded-lg border px-4 text-sm">Options</DropdownMenuTrigger>
              <DropdownMenuContent>
                <DropdownMenuItem
                  onClick={() => {
                    setValue({
                      isOpen: true,
                      onConfirm: handleAiCategorize,
                      title: "Categorize Current Selection",
                      message: "categorize current the filter select?",
                    });
                  }}>
                  Categorize
                </DropdownMenuItem>
                <DropdownMenuItem onClick={donwloadAsCsv}>CSV</DropdownMenuItem>
                <DropdownMenuItem onClick={() => setUploadDialogOpen(true)}>Upload</DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
          <ExpenseFilterPills />
          {view === "aggregate" ? <CategorySummaryTable /> : <ExpenseTable />}
          <UploadStatementForm isOpen={isUploadDialogOpen} setIsOpen={setUploadDialogOpen} />
        </div>
        <ExpenseForm />
      </BasePage>
    </>
  );
}
