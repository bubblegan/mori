import { useCallback, useEffect, useState } from "react";
import { GetServerSidePropsContext } from "next";
import Head from "next/head";
import { useSearchParams } from "next/navigation";
import { useRouter } from "next/router";
import BasePage from "@/components/base-page";
import { CategoriseExpenseForm } from "@/components/categorise-expense-form";
import CategorySelect from "@/components/category-select";
import DateRangePicker from "@/components/date-range-picker";
import { ExpenseFilterPills } from "@/components/expense-filter-pills";
import ExpenseForm from "@/components/expense-form";
import { ExpenseSummarySection } from "@/components/expense-summary-section";
import ExpenseTable from "@/components/expense-table";
import KeywordSearch from "@/components/keyword-search";
import StatementSelect from "@/components/statement-select";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuItem,
  DropdownMenuContent,
} from "@/components/ui/dropdown-menu";
import {
  Select,
  SelectTrigger,
  SelectValue,
  SelectGroup,
  SelectItem,
  SelectContent,
} from "@/components/ui/select";
import UploadStatementForm from "@/components/upload-statement-form";
import { formatToDisplayDate } from "@/utils/date-util";
import { downloadCsv } from "@/utils/download-as-csv";
import { useHandleExpenseFetch } from "@/utils/hooks/use-handle-expense-fetch";
import { Plus, Settings, Upload } from "lucide-react";

export type AggregateType = "category" | "monthly";

export default function Expenses() {
  const [isUploadDialogOpen, setUploadDialogOpen] = useState(false);
  const [isCategoriseDialogOpen, setCategoriseDialog] = useState(false);

  const searchParams = useSearchParams();
  const router = useRouter();

  useEffect(() => {
    const params = new URLSearchParams(window.location.search);
    if (params.size === 0) {
      router.push({
        pathname: "/expenses",
        query: { ["date-range"]: "year-to-date" },
      });
    }
  }, [router]);

  const view = searchParams?.get("view");

  // get data here
  const { expenses, amount } = useHandleExpenseFetch();

  const donwloadAsCsv = useCallback(() => {
    if (expenses.data) {
      const csvData = expenses.data.map((expense) => {
        return {
          id: expense.id,
          amount: `${Number(expense.amount).toFixed(2).toLocaleString()}`,
          statement: expense.Statement?.name || "",
          description: expense.description,
          date: formatToDisplayDate(expense.date),
          category: expense.Category?.title || "",
        };
      });
      downloadCsv(csvData);
    }
  }, [expenses.data]);

  return (
    <>
      <Head>
        <title>Expenses</title>
        <meta name="description" content="SelectContentGenerated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <BasePage>
        <div className="flex w-full flex-col gap-4">
          <div className="flex w-full justify-between">
            {view === "aggregate" ? (
              <div className="flex gap-3">
                <DateRangePicker />
                <div className="h-10 w-fit rounded-md border border-input px-3 py-2 text-sm text-primary">
                  <span>Total: $ {new Intl.NumberFormat().format(Number(amount))}</span>
                </div>
              </div>
            ) : (
              <div className="flex gap-3">
                <div className="w-64">
                  <KeywordSearch />
                </div>
                <StatementSelect />
                <CategorySelect />
                <DateRangePicker />
              </div>
            )}
            <div className="flex flex-row gap-3">
              <Select
                onValueChange={(value) => {
                  const params = new URLSearchParams(window.location.search);
                  if (value === "aggregate") {
                    params.set("view", value);
                    params.delete("statement-ids");
                    params.delete("category-ids");
                    params.delete("keyword");
                  } else {
                    params.delete("view");
                  }
                  router.push(`/expenses?${params.toString()}`, undefined, {
                    shallow: true,
                  });
                }}
                defaultValue="expense"
                value={view || "expense"}>
                <SelectTrigger className="w-[180px]">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectGroup>
                    <SelectItem value="expense">Expenses View</SelectItem>
                    <SelectItem value="aggregate">Aggregate View</SelectItem>
                  </SelectGroup>
                </SelectContent>
              </Select>
              <Button variant="outline" onClick={() => setUploadDialogOpen(true)}>
                <Plus size={16} />
              </Button>
              <Button variant="outline" onClick={() => setUploadDialogOpen(true)}>
                <Upload size={16} />
              </Button>
              <DropdownMenu>
                <DropdownMenuTrigger onClick={() => setUploadDialogOpen(true)} asChild>
                  <Button variant="outline">
                    <Settings size={16} />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end">
                  <DropdownMenuItem onClick={() => setCategoriseDialog(true)}>Categorise</DropdownMenuItem>
                  <DropdownMenuItem onClick={donwloadAsCsv}>CSV</DropdownMenuItem>
                  <DropdownMenuItem onClick={donwloadAsCsv}>Tag</DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
          </div>
          <ExpenseFilterPills />
          {view === "aggregate" ? <ExpenseSummarySection /> : <ExpenseTable />}
        </div>
        <ExpenseForm />
        <UploadStatementForm isOpen={isUploadDialogOpen} setIsOpen={setUploadDialogOpen} />
        <CategoriseExpenseForm isOpen={isCategoriseDialogOpen} setIsOpen={setCategoriseDialog} />
      </BasePage>
    </>
  );
}

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const { query, resolvedUrl } = context;

  // Check if 'pass' query param is missing
  if (Object.keys(query).length === 0) {
    // Redirect to the same page with the 'pass=true' query parameter
    return {
      redirect: {
        destination: `${resolvedUrl}?date-range=year-to-date`,
        permanent: false,
      },
    };
  }

  // Continue with the normal page rendering if 'pass' is present
  return {
    props: {}, // Pass any necessary props here
  };
}
